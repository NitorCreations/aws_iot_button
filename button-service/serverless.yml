# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: button-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - iot:UpdateCertificate
        - iot:CreatePolicy
        - iot:AttachPrincipalPolicy
        - iot:AttachThingPrincipal
        - iot:UpdateThingShadow
        - iot:GetThingShadow
      Resource: "*"

# you can overwrite defaults here
  stage: dev
  region: eu-west-1

plugins:
  - serverless-plugin-scripts

custom:
  scripts:
    hooks:
      'after:deploy:resources': ./init_iot_logging.sh
  cacert: ${file(../cacert/cacertid.yml)}
  jsvars: ${file(variables.js)}
  stage: ${opt:stage, self:provider.stage}
  topicNamePrefix: iotbutton

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  registerDevice:
    handler: registerDevice/handler.registerDevice
    environment:
      region: ${self:provider.region}
    events:
      - iot:
          sql: "SELECT * FROM '$aws/events/certificates/registered/${self:custom.cacert.caCertificateId}'"
  updateButtonStatusFromIOTButton:
    handler: updateButtonStatus/iotButtonHandler.pushHandler
    environment:
      region: ${self:provider.region}
      iotEndpoint: ${self:custom.jsvars.iot.endpoint}
    events:
      - iot:
          sql: "SELECT * FROM 'iotbutton/+'"

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    iotLogRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "iot.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSIoTLogging
    buttonThing:
      Type: AWS::IoT::Thing
      Properties:
        ThingName: button
    cognitoIdentityPoolForApp:
      Type: "AWS::Cognito::IdentityPool"
      Properties:
        IdentityPoolName: ButtonAppIdentityPool
        AllowUnauthenticatedIdentities: true
    cognitoRoleAttachment:
      Type: "AWS::Cognito::IdentityPoolRoleAttachment"
      Properties:
        IdentityPoolId:
          Ref: cognitoIdentityPoolForApp
        Roles:
          unauthenticated:
            Fn::GetAtt:
              - appUnauthenticatedRole
              - Arn
          authenticated:
            Fn::GetAtt:
              - appUnauthenticatedRole
              - Arn
    appUnauthenticatedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Action: sts:AssumeRoleWithWebIdentity
              Effect: "Allow"
              Condition:
                StringEquals:
                  cognito-identity.amazonaws.com:aud:
                    Ref: cognitoIdentityPoolForApp
                ForAnyValue:StringLike:
                  cognito-identity.amazonaws.com:amr: "unauthenticated"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
        Policies:
          - PolicyName: appUnauthenticatedPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - iot:Connect
                  Resource: "arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:client/button/app/*"
                - Effect: "Allow"
                  Action:
                    - iot:GetThingShadow
                    - iot:UpdateThingShadow
                  Resource: "arn:aws:iot:eu-west-1:${self:custom.jsvars.accountId}:thing/button"
                - Effect: "Allow"
                  Action:
                    - iot:Subscribe
                  Resource:
                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topicfilter/${self:custom.topicNamePrefix}/*
                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topicfilter/$aws/things/button/*
                - Effect: "Allow"
                  Action:
                    - iot:Receive
                    - iot:Publish
                  Resource:
                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topic/${self:custom.topicNamePrefix}/*
                    - arn:aws:iot:${self:provider.region}:${self:custom.jsvars.accountId}:topic/$aws/things/button/*
    appHostingBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        AccessControl: PublicRead
        Tags:
          - Key: buttonApp
            Value: ${self:custom.stage}
    appHostingBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: appHostingBucket
                    - /*
        Bucket:
          Ref: appHostingBucket
    appCloudFront:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          Comment: CloudFront for button app mainly in order to enable HTTPS
          DefaultCacheBehavior:
            DefaultTTL: 60
            ForwardedValues:
              QueryString: true
            MaxTTL: 60
            MinTTL: 60
            TargetOriginId: appBucket
            ViewerProtocolPolicy: redirect-to-https
          DefaultRootObject: index.html
          Enabled: true
          Origins:
            - DomainName:
                Fn::Join:
                  - ""
                  - - Ref: appHostingBucket
                    - ".s3.amazonaws.com"
              Id: appBucket
              S3OriginConfig:
                OriginAccessIdentity: ''
          PriceClass: PriceClass_200
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'

  # iotPermission:
  #   Type: "AWS::Lambda::Permission"
  #   Properties:
  #     Action: lambda:InvokeFunction
  #     FunctionName:
  #       Fn::GetAtt:
  #         - "RegisterDeviceLambdaFunction"
  #         - "Arn"
  #     Principal: "iot.amazonaws.com"
  #     SourceAccount:
  #       Ref: "AWS::AccountId"
  # registerDeviceRule:
  #   Type: "AWS::IoT::TopicRule"
  #   Properties:
  #     RuleName: buttonRegisterDeviceRule
  #     TopicRulePayload:
  #       Actions:
  #         - Lambda:
  #             FunctionArn:
  #               Fn::GetAtt:
  #                 - "RegisterDeviceLambdaFunction"
  #                 - "Arn"
  #       Description: Trigger device auto registration function
  #       RuleDisabled: False
  #       Sql: "SELECT * FROM '$aws/events/certificates/registered/${self:custom.cacert.caCertificateId}'"

  Outputs:
    AppURL:
      Description: "URL for the button app"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Fn::GetAtt:
              - appCloudFront
              - DomainName
      Export:
        Name:
          Fn::Join:
            - ""
            - - Ref: AWS::StackName
              - ":"
              - "AppURL"
