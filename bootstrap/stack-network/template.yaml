AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  paramInfraName: {Description: Name of the infra account to initialize, Type: String,
    Default: infra}
  paramVPCCidr: {Description: VPC CIDR block, Type: String, Default: 10.117.0.0/16}
  paramPubACidr: {Description: Public Subnet A CIDR block, Type: String, Default: 10.117.0.0/20}
  paramPrivACidr: {Description: Public Subnet A CIDR block, Type: String, Default: 10.117.48.0/20}
  paramPubBCidr: {Default: 10.117.16.0/20, Description: Public Subnet B CIDR block,
    Type: String}
  paramPrivBCidr: {Default: 10.117.64.0/20, Description: Private Subnet B CIDR block,
    Type: String}
  paramPubCCidr: {Default: 10.117.32.0/20, Description: Public Subnet C CIDR block,
    Type: String}
  paramPrivCCidr: {Default: 10.117.80.0/20, Description: Private Subnet C CIDR block,
    Type: String}
Description: Setup VPC with public and private subnets for all AZs in region.
Resources:
  resourceVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: {Ref: paramVPCCidr}
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
      - Key: Name
        Value: {Ref: 'AWS::StackName'}
  resourceDHCPOpts:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        Fn::Join:
        - ''
        - - {Ref: 'AWS::Region'}
          - .
          - {Ref: paramInfraName}
          - -compute.internal
      DomainNameServers: [AmazonProvidedDNS]
  resourceDHCPAssoc:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: {Ref: resourceVPC}
      DhcpOptionsId: {Ref: resourceDHCPOpts}
  resourceIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: {Ref: 'AWS::StackName'}
  resourecAttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: {Ref: resourceIGW}
      VpcId: {Ref: resourceVPC}
  resourcePubRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' public route table'
      VpcId: {Ref: resourceVPC}
  resourcePubRoute:
    Type: AWS::EC2::Route
    DependsOn: resourceIGW
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: resourceIGW}
      RouteTableId: {Ref: resourcePubRouteTable}
  resourcePubSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: {Ref: paramPubACidr}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' public subnet '
      VpcId: {Ref: resourceVPC}
  resourcePubSubnetRouteTableAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: resourcePubRouteTable}
      SubnetId: {Ref: resourcePubSubnetA}
  resourcePubSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public subnet group
      SubnetIds:
      - {Ref: resourcePubSubnetA}
      - {Ref: resourcePubSubnetB}
      - {Ref: resourcePubSubnetC}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' public subnet group'
  resourcePrivRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' private route table A'
      VpcId: {Ref: resourceVPC}
  resourcePrivSubnetA:
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: {Ref: paramPrivACidr}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' private subnet '
      VpcId: {Ref: resourceVPC}
    Type: AWS::EC2::Subnet
  resourcePrivSubnetRouteTableAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: resourcePrivRouteTableA}
      SubnetId: {Ref: resourcePrivSubnetA}
  resourcePrivSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private subnet group
      SubnetIds:
      - {Ref: resourcePrivSubnetA}
      - {Ref: resourcePrivSubnetB}
      - {Ref: resourcePrivSubnetC}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' private subnet group'
  resourcePubSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: {Ref: paramPubBCidr}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' public subnet eu-west-1b'
      VpcId: {Ref: resourceVPC}
  resourcePubSubnetRouteTableAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: resourcePubRouteTable}
      SubnetId: {Ref: resourcePubSubnetB}
  resourcePrivSubnetB:
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: {Ref: paramPrivBCidr}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' private subnet eu-west-1b'
      VpcId: {Ref: resourceVPC}
    Type: AWS::EC2::Subnet
  resourcePrivRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' private route table B'
      VpcId: {Ref: resourceVPC}
  resourcePrivSubnetRouteTableAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: resourcePrivRouteTableB}
      SubnetId: {Ref: resourcePrivSubnetB}
  resourcePubSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1c
      CidrBlock: {Ref: paramPubCCidr}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' public subnet eu-west-1c'
      VpcId: {Ref: resourceVPC}
  resourcePubSubnetRouteTableAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: resourcePubRouteTable}
      SubnetId: {Ref: resourcePubSubnetC}
  resourcePrivSubnetC:
    Properties:
      AvailabilityZone: eu-west-1c
      CidrBlock: {Ref: paramPrivCCidr}
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' private subnet eu-west-1c'
      VpcId: {Ref: resourceVPC}
    Type: AWS::EC2::Subnet
  resourcePrivRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - {Ref: 'AWS::StackName'}
            - ' private route table C'
      VpcId: {Ref: resourceVPC}
  resourcePrivSubnetRouteTableAssocC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: {Ref: resourcePrivRouteTableC}
      SubnetId: {Ref: resourcePrivSubnetC}
Outputs:
  VPCCIDR:
    Description: VPC CIDR Block
    Value: {Ref: paramVPCCidr}
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - VPCCIDR
  VPC:
    Description: VPC ID
    Value: {Ref: resourceVPC}
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - VPC
  subnetInfraA:
    Description: Public Subnet
    Value: {Ref: resourcePubSubnetA}
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - publicSubnetA
  subnetPrivInfraA:
    Description: Private Subnet
    Value: {Ref: resourcePrivSubnetA}
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - privateSubnetA
  publicSubnetGroup:
    Description: Public subnet group
    Value: {Ref: resourcePubSubnetGroup}
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - publicSubnetGroup
  privateSubnetGroup:
    Description: Private subnet group
    Value: {Ref: resourcePrivSubnetGroup}
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - privateSubnetGroup
  subnetInfraB:
    Description: Public Subnet B
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - publicSubnetB
    Value: {Ref: resourcePubSubnetB}
  subnetPrivInfraB:
    Description: Private Subnet B
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - privateSubnetB
    Value: {Ref: resourcePrivSubnetB}
  subnetInfraC:
    Description: Public Subnet C
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - publicSubnetC
    Value: {Ref: resourcePubSubnetC}
  subnetPrivInfraC:
    Description: Private Subnet C
    Export:
      Name:
        Fn::Join:
        - ':'
        - - {Ref: 'AWS::StackName'}
          - privateSubnetC
    Value: {Ref: resourcePrivSubnetC}
